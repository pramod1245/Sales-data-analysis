# -*- coding: utf-8 -*-
"""Untitled36.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/134yVd7MD0pdRk1v_27XmanmlrxcEFrUy
"""



pip install dash

import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, Input, Output
import numpy as np

# Load and preprocess data
df = pd.read_csv("superstore_sales_dataset.csv")
df.columns = df.columns.str.strip()
df['Order_Date'] = pd.to_datetime(df['Order_Date'])
df['Sales'] = pd.to_numeric(df['Sales'], errors='coerce')

# Simulate Profit and Inventory Days
np.random.seed(42)
df['Profit'] = df['Sales'] * np.random.uniform(0.1, 0.25, size=len(df))
df['Inventory Days'] = np.random.randint(20, 120, size=len(df))
df.dropna(subset=['Category', 'Sub_Category', 'Sales', 'Profit', 'Region'], inplace=True)

# Initialize Dash
app = Dash(__name__)
app.title = "Retail Dashboard"

# Layout
app.layout = html.Div([
    html.H1("🛍️ Retail Business Performance Dashboard", style={'textAlign': 'center', 'color': '#2c3e50'}),

    # KPI Cards
    html.Div([
        html.Div(id='kpi-sales', className='kpi-box'),
        html.Div(id='kpi-profit', className='kpi-box'),
        html.Div(id='kpi-inventory', className='kpi-box'),
    ], style={'display': 'flex', 'justifyContent': 'space-around', 'marginTop': '20px'}),

    html.Div([
        html.Label("📍 Select Region:"),
        dcc.Dropdown(
            options=[{'label': r, 'value': r} for r in df['Region'].unique()],
            id='region-filter',
            multi=True
        ),
        html.Label("📦 Select Category:"),
        dcc.Dropdown(
            options=[{'label': c, 'value': c} for c in df['Category'].unique()],
            id='category-filter',
            multi=True
        ),
        html.Label("🗓️ Select Date Range:"),
        dcc.DatePickerRange(
            id='date-filter',
            start_date=df['Order_Date'].min(),
            end_date=df['Order_Date'].max(),
        ),
        html.Label("📊 Choose Chart Type:"),
        dcc.Dropdown(
            id='chart-type',
            options=[
                {'label': 'Bar Chart', 'value': 'bar'},
                {'label': 'Pie Chart', 'value': 'pie'}
            ],
            value='bar'
        ),
    ], style={'width': '25%', 'float': 'left', 'padding': '20px'}),

    html.Div([
        dcc.Graph(id='sales-profit-graph'),
        dcc.Graph(id='correlation-scatter')
    ], style={'width': '70%', 'float': 'right', 'padding': '20px'}),

    html.Div(style={'clear': 'both'})
])

# Callbacks
@app.callback(
    [Output('sales-profit-graph', 'figure'),
     Output('correlation-scatter', 'figure'),
     Output('kpi-sales', 'children'),
     Output('kpi-profit', 'children'),
     Output('kpi-inventory', 'children')],
    [Input('region-filter', 'value'),
     Input('category-filter', 'value'),
     Input('date-filter', 'start_date'),
     Input('date-filter', 'end_date'),
     Input('chart-type', 'value')]
)
def update_graphs(selected_regions, selected_categories, start_date, end_date, chart_type):
    filtered_df = df.copy()

    if selected_regions:
        filtered_df = filtered_df[filtered_df['Region'].isin(selected_regions)]
    if selected_categories:
        filtered_df = filtered_df[filtered_df['Category'].isin(selected_categories)]
    if start_date and end_date:
        filtered_df = filtered_df[(filtered_df['Order_Date'] >= start_date) & (filtered_df['Order_Date'] <= end_date)]

    # KPI Metrics
    total_sales = f"💰 Total Sales: ${filtered_df['Sales'].sum():,.2f}"
    total_profit = f"📈 Total Profit: ${filtered_df['Profit'].sum():,.2f}"
    avg_inventory = f"📦 Avg. Inventory Days: {filtered_df['Inventory Days'].mean():.1f}"

    # Chart 1: Bar or Pie
    agg = filtered_df.groupby('Sub_Category')[['Sales', 'Profit']].sum().reset_index()
    if chart_type == 'bar':
        fig1 = px.bar(agg, x='Sub_Category', y=['Sales', 'Profit'], barmode='group',
                      title='Sales & Profit by Sub-Category', template='seaborn')
    else:
        pie_df = agg.groupby('Sub_Category')['Sales'].sum().reset_index()
        fig1 = px.pie(pie_df, names='Sub_Category', values='Sales',
                      title='Sales Distribution by Sub-Category', template='seaborn')

    # Chart 2: Scatter Plot
    fig2 = px.scatter(filtered_df, x='Inventory Days', y='Profit',
                      color='Category', title='Inventory Days vs. Profitability',
                      hover_data=['Sub_Category', 'Sales'], template='seaborn')

    return fig1, fig2, total_sales, total_profit, avg_inventory

# Styling for KPI boxes (optional if using Dash Bootstrap Components)
app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <style>
            .kpi-box {
                background-color: #f9f9f9;
                padding: 15px;
                border-radius: 10px;
                text-align: center;
                font-size: 18px;
                box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                width: 30%;
            }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

# Run App
if __name__ == '__main__':
    app.run(debug=True)